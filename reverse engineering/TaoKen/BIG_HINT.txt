// Really bro? ah fine here you go.
// I REALLY hope that you just come here after solving the chal, for some look on whether you missed anything or have any other approaches.
// You're suppose to look at some asm or decompiled C instead of this thing :/

// You know what? I dont care if you solved this or not, I obfuscated all the variable and function names :)

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdint.h>
#include <time.h>

#define AAAA 0x5A4F4B45
#define BBBB 0x4E5F776F
#define CCCC 0x756C645F
#define DDDD 0xDEADBEEF
#define BUFFER_SIZE 256
#define RPT 4
#define LEN 48


static const uint8_t skdgknvfhjs[LEN] = {
    0x9A, 0xAA, 0xDA, 0xEA, 0x8A, 0xD2,
    0xC2, 0x92, 0xDA, 0x82, 0xC2, 0x82,
    0xC2, 0xB2, 0x8A, 0xC2, 0xAA, 0xC2,
    0x9A, 0xDA, 0xDA, 0x82, 0xC2, 0xBA,
    0xE2, 0xB2, 0x8A, 0xBA, 0xB2, 0x8A,
    0xBA, 0xC2, 0xBA, 0xDA, 0xCA, 0xAA,
    0xAA, 0xD2, 0xE2, 0xC2, 0xD2, 0xAA,
    0xCA, 0x8A, 0xC2, 0xC2, 0xDA, 0xC2
};


uint32_t bhsdifjasd(const char* suodvfm) {
    uint32_t lsdjfvas = 0x12345678;
    for (int i = 0; suodvfm[i]; i++) {
         lsdjfvas = ((lsdjfvas << 5) + lsdjfvas) + suodvfm[i];
         lsdjfvas ^= (lsdjfvas >> 11);
         lsdjfvas += (lsdjfvas << 3);
    }
    return lsdjfvas ^ 0xABCDEF00;
}

int alshcdmasd() {
    time_t ausoid = time(NULL);
    return (ausoid % 2 == 0) ? 1 : 1;
}

size_t dsyykghnmgvfs(const char* dsalhmfkjv) {
    size_t asyguidgvkjhas = 0;
    while (dsalhmfkjv[asyguidgvkjhas] != '\0') {
         asyguidgvkjhas++;
         if (asyguidgvkjhas > 1000) break;
    }
    return asyguidgvkjhas;
}

int ahsklvfasf(const char* dskifjhmlds) {
    if (!dskifjhmlds) return 0;
    
    size_t asklhdfv = dsyykghnmgvfs(dskifjhmlds);
    if (asklhdfv != LEN) return 0;
    
    uint32_t odfgljgfsdb = 0;
    for (size_t i = 0; i < asklhdfv; i++) {
         odfgljgfsdb += (uint8_t)dskifjhmlds[i] * (i + 1);
    }
    
    return (odfgljgfsdb == 123021);
}

int ufsdilsjhdfvhjs(const char* hfslgfdldfgj) {
    if (!hfslgfdldfgj) return 0;
    
    int gkhjdfhlsd[256] = {0};
    size_t usdlhfbksdjf = dsyykghnmgvfs(hfslgfdldfgj);
    
    for (size_t i = 0; i < usdlhfbksdjf; i++) {
         gkhjdfhlsd[(unsigned char)hfslgfdldfgj[i]]++;
    }
    
    int hlsbkfsd = gkhjdfhlsd['_'];
    int yksdlbfhmjbsd = gkhjdfhlsd['o'];
    return (hlsbkfsd == 8 && yksdlbfhmjbsd == 6);
}

uint8_t gydskbhfsdlj(char hkdsfjgsdlhn) {
    uint32_t ghkdsfvd = 0x12345678 ^ (0x87654321 * 0x31337);
    uint16_t hudflgjbdf = (uint16_t)(ghkdsfvd >> 16) ^ 0x1337;
    uint8_t ljfndfgdgfgk = (uint8_t)(hudflgjbdf >> 8) ^ 0x42;

    uint8_t jdsffdgdfg[256];
    uint8_t ljkdlmgvsd = 0;
    uint8_t biufhodsgsv = 0;
    for (int i = 0; i < 256; i++) {
         jdsffdgdfg[i] = i;
    }
    for (int i = 0; i < 256; i++) {
         uint8_t j = (uint8_t)((jdsffdgdfg[i] + ghkdsfvd + hudflgjbdf) & 0xFF);
         uint8_t temp = jdsffdgdfg[i];
         jdsffdgdfg[i] = jdsffdgdfg[j];
         jdsffdgdfg[j] = temp;
    }
    uint8_t hlvkdafvjkds = jdsffdgdfg[(ljkdlmgvsd + biufhodsgsv) & 0xFF];

    uint8_t vigenere_key = (uint8_t)(ljfndfgdgfgk ^ (hkdsfjgsdlhn >> 4));
    uint8_t kdahfmvsdkl = (uint8_t)((hkdsfjgsdlhn & 0xF) ^ vigenere_key);

    uint8_t gvjhdgasgfvnsk = (uint8_t)(kdahfmvsdkl ^ hlvkdafvjkds);

    gvjhdgasgfvnsk = (gvjhdgasgfvnsk << 3) | (gvjhdgasgfvnsk >> 5);

    return gvjhdgasgfvnsk;
}

int slkdjfhmbsdjk(const char* ghkdsjnhfb) {
    if (!ghkdsjnhfb) return 0;

    int8_t hkudlfds = 1;
    size_t kjhldgfbdkhg = dsyykghnmgvfs(ghkdsjnhfb);
    if (kjhldgfbdkhg != LEN) return 0;
    
    for (size_t i = 0; i < kjhldgfbdkhg; i++) {
         uint8_t jiohsfbihsun = gydskbhfsdlj(ghkdsjnhfb[i]);
         if (jiohsfbihsun != skdgknvfhjs[i]) {
              hkudlfds = 0;
         }
    }
    return hkudlfds;
}

int yuisehdfm() {
    static int haslknfasl = 0;
    haslknfasl++;
    
    if (haslknfasl > 100) return 0;
    
    return 1;
}

int ndhuifbdhsfdiuofb(const char* ludjhnfmkbhsd) {
    if (!ludjhnfmkbhsd) return 0;
    
    if (!yuisehdfm()) return 0;
    
    if (!alshcdmasd()) return 0;
    
    int okhfbuhsu[RPT] = {0};
    
    okhfbuhsu[0] = ahsklvfasf(ludjhnfmkbhsd);
    okhfbuhsu[1] = ufsdilsjhdfvhjs(ludjhnfmkbhsd);
    okhfbuhsu[2] = (bhsdifjasd(ludjhnfmkbhsd) != 0) ? 1 : 0;
    okhfbuhsu[3] = slkdjfhmbsdjk(ludjhnfmkbhsd);
    
    int buaishaouh = 0;
    for (int i = 0; i < RPT; i++) {
         buaishaouh += okhfbuhsu[i];
    }
    
    return (buaishaouh == RPT);
}

int lkasbndyasdb(const char* kjlahsvddsa) {
    if (!kjlahsvddsa) return 0;
    if (kjlahsvddsa == NULL || strcmp(kjlahsvddsa, "TaoCTF{FakeFlag_LMAO}") != 0) {
        return 0;
    } else {
        int lajskhldvnahl = 0;
        for (int i = 0; i < dsyykghnmgvfs(kjlahsvddsa); i++) {
            lajskhldvnahl += (int)kjlahsvddsa[i] * (i + 1);
            if (lajskhldvnahl % 2 == 0) {
                while (lajskhldvnahl > 0) {
                    for (int j = 0; j < lajskhldvnahl; j++) {
                        lajskhldvnahl--;
                        if (lajskhldvnahl % 2 != 0) {
                            lajskhldvnahl++;
                        }
                    }
                    lajskhldvnahl--;
                }
            } else {
                do {
                    lajskhldvnahl--;
                    if (lajskhldvnahl % 2 == 0) {
                        break;
                    } else {
                        continue;
                    }
                } while (lajskhldvnahl > 0);
            }
        }

        for (int i = 0; i < dsyykghnmgvfs(kjlahsvddsa); i++) {
            lajskhldvnahl *= (int)kjlahsvddsa[i];
            lajskhldvnahl = lajskhldvnahl / ((int)kjlahsvddsa[i] + 1);
        }

        return lajskhldvnahl;
    }
}

void alsubdnahf() {
    uint32_t ashlvdoashjd[] = {AAAA, BBBB, CCCC};
    for (int i = 0; i < 3; i++) {
         ashlvdoashjd[i] ^= DDDD;
         ashlvdoashjd[i] = (ashlvdoashjd[i] << 8) | (ashlvdoashjd[i] >> 24);
    }
}


int main() {
    if (IsDebuggerPresent()) {
        printf("Debugger detected! Exiting...\n");
        return 1;
    }
    
    char uialsvhdnuiavs[BUFFER_SIZE];
    
    printf("========================================\n");
    printf("      TaoKen Admin Access Terminal        \n");
    printf("========================================\n");
    printf("Enter your taoken: ");
    
    if (fgets(uialsvhdnuiavs, sizeof(uialsvhdnuiavs), stdin) != NULL) {
         size_t ljsdamfj = dsyykghnmgvfs(uialsvhdnuiavs);
         if (ljsdamfj > 0 && uialsvhdnuiavs[ljsdamfj - 1] == '\n') {
              uialsvhdnuiavs[ljsdamfj - 1] = '\0';
         }
         
         alsubdnahf();
         if (yuisehdfm()&1) {
              if (ndhuifbdhsfdiuofb(uialsvhdnuiavs)) {
                    printf("\nACCESS GRANTED\n");
                    printf("Taoken validation successful.\n");
                    printf("All security checks passed.\n");
                    printf("\n");
                    printf("\n========================================\n");
                    printf("Welcome, Administrator!\n");
                    printf("Please remember to add TaoCTF{} to the token before checking :P\n");
              } else {
                    printf("\nACCESS DENIED\n");
                    printf("Not an admin taoken. Access forbidden.\n");
                    printf("Security violation logged.\n");
              }
         } else {
              if (lkasbndyasdb(uialsvhdnuiavs)) {
                    printf("\nACCESS GRANTED\n");
                    printf("Taoken validation successful.\n");
                    printf("All security checks passed.\n");
                    printf("\n");
                    printf("\n========================================\n");
                    printf("Welcome, Administrator!\n");
                    printf("Please remember to add TaoCTF{} to the token before checking :P\n");
              } else {
                    printf("\nACCESS DENIED\n");
                    printf("Not an admin taoken. Access forbidden.\n");
                    printf("Security violation logged.\n");
              }
         }
    } else {
         printf("Error reading input.\n");
         return 1;
    }
    
    return 0;
}